{"config":{"lang":["no"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#release-operate-report","title":"Release Operate Report","text":"<pre><code>\"ror\" is the Norwegian word for rudder.\nA rudder is a control device where a blade or a fin is attached to a shaft.\nThis is used to change the direction of a force in a fluid or gas.\nRudders are most commonly used on boats, ships, and aircraft.\n</code></pre> <p>ROR is a multi cluster management tool aimed to streamline the process of creating kubernetes clusters on any provider or architecture. ROR is developed by Norsk Helsenett SF but we move to remove any references and internal logic related to the organization. Our aim is to release the project as an open source project.</p>"},{"location":"#api-driven","title":"API driven","text":"<p>ROR is API driven with provided web and cli clients. ROR leverages the Kubernetes API definition extending it with additional metadata and resources.</p>"},{"location":"#provider-agnostic-but-extensible","title":"Provider agnostic but extensible","text":"<p>ROR is aimed to be provider/cloud agnostic but stil extensible to provide provider specific functionality by the use of microservices.</p>"},{"location":"#distributed-model","title":"Distributed model","text":"<p>ROR relies on a distributed model using agents in each cluster. This model ensures that ROR cant be used to access the cluster directly.</p>"},{"location":"#development-values","title":"Development values","text":"<ul> <li>Support simple primitives first then extend support if needed.</li> <li>Collect only needed data, scope the datamodel to suit our need.</li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#release","title":"Release","text":"function milestone done description create cluster 1.0 90% Create cluster from sclusterspec, allows integration with other teams managementssolution. upgrade/scale cluster 1.0 20% Upgrade/scal cluster from changing sclusterspec, allows integration with other teams managementssolution. decomission cluster 1.0 20% Decomission cluster, allows integration with other teams managementssolution."},{"location":"#operate","title":"Operate","text":"function milestone done description cluster inventory 1.0 Collect basic clustrerinformation cluster status 1.0 Calculate healthscore for the cluster based on established rules. Configuration management 1.0 - Dex integrations 1.0 Automatic provisioning of dex clientid and clientsecrets - tooling-config 1.0 90% Full config of tooling from ROR - Authorization 1.0 Configure access to clusters from ROR"},{"location":"#report","title":"Report","text":"function milestone done description - Metrics 1.0 Gather basic cluster metrics - Security scan 1.0 Run scans of cluster components like config, images certificates..."},{"location":"components/","title":"Components","text":""},{"location":"components/#clients","title":"Clients","text":"ror-admin <p>Webclient writen in angular.</p> ror-cli <p>cli-client writen in golang.</p>"},{"location":"components/#core","title":"Core","text":"ror-api <p>The main component of ror.</p> vault <p>Hashicorp vault, secretstorage and identity-manager for services in ROR</p> mongoDB <p>Database</p> ror-docs <p>127.0.0.1</p>"},{"location":"components/#microservices","title":"Microservices","text":"ror-ms-nhn <p>Microservice to do NHN spesific operations</p> ror-ms-auth <p>Microservice integrating dex</p> ror-ms-slack <p>Microservice integrating slack</p>"},{"location":"components/#distributed","title":"Distributed","text":"ror-operator <p>Low level cluster operator, bootstraping cluster integration and tooling.</p> ror-agent <p>In-cluster datacollector</p>"},{"location":"design/","title":"Design","text":""},{"location":"design/#central-component","title":"Central component","text":"<ul> <li>Multi datacenter<ul> <li>trd1-mgmt/mgmt-felles-0001</li> <li>osl1-mgmt/mgmt-felles-0001</li> </ul> </li> <li>Api<ul> <li>swagger</li> </ul> </li> <li> <p>Client</p> <ul> <li>ror-gui (Web frontend)</li> <li>ror-cli (CLI)</li> </ul> </li> <li> <p>Authentication OIDC</p> </li> <li>user (AD via dex)<ul> <li>api-tokens generated by ror</li> </ul> </li> <li> <p>service accounts </p> <ul> <li>cluster sa generated by ror, stored in vault</li> </ul> </li> <li> <p>Database/store</p> <ul> <li>MongoDB</li> <li>Vault</li> </ul> </li> <li> <p>Message/event system</p> <ul> <li>RabbitMQ</li> </ul> </li> </ul>"},{"location":"design/#distributed-component","title":"Distributed component","text":"<ul> <li>ror-agent</li> <li>ror-operator</li> </ul>"},{"location":"getting-started/","title":"Getting started with ROR development","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux distro or WSL2 for windows</li> <li>Docker runtime<ul> <li>wsl2 tips: https://learn.microsoft.com/en-us/windows/wsl/systemd</li> </ul> </li> <li>Golang SDK (if you want to change and debug ROR) https://go.dev</li> </ul> <p>Optional:</p> <ul> <li>Docker Desktop (https://www.docker.com/products/docker-desktop/)</li> <li>Talosctl (https://www.talos.dev/v1.8/introduction/quickstart/)</li> <li>Kind (https://kind.sigs.k8s.io)</li> <li>K3d (https://k3d.io/v5.7.4/#releases)</li> <li>Python for running documentation with mkdocs</li> </ul>"},{"location":"getting-started/#clone","title":"Clone","text":"<ol> <li>Create a folder on you computer where you want to put the code</li> <li>git clone (ROR GIT URL, https:// or git://)</li> </ol>"},{"location":"getting-started/#hardware-demands","title":"Hardware demands:","text":"<p>Minimum 16 gb RAM, but this will potentially painfull... Recommended is 32 gb RAM or more</p>"},{"location":"getting-started/#run-with-docker","title":"Run with docker","text":"<pre><code>./r.sh api web\n</code></pre> <p>This runs containers; dex, openldap, vault, rabbitmq, mongodb, mongo-express, redis, ms-auth, ms-kind, ms-talos. Does not use that much memory</p> <p>If you want to run all, this includes all the container above, and jaeger and opentelemetry collector</p> <pre><code>docker compose up\n</code></pre>"},{"location":"getting-started/#login-to-ror-web","title":"Login to ROR-web","text":"<p>Open your favorite browser, and go to http://localhost:11000 Log in with: Accounts:</p> <ul> <li>\"super admin\"<ul> <li>Login with <code>superadmin@ror.dev</code> and <code>S3cret!</code></li> </ul> </li> <li>Read only admin<ul> <li>Login with <code>readadmin@ror.dev</code> and <code>S3cret!</code></li> </ul> </li> <li>developer 1<ul> <li>Login with <code>dev1@ror.dev</code> and <code>S3cret!</code></li> </ul> </li> <li>developer 2<ul> <li>Login with <code>dev2@ror.dev</code> and <code>S3cret!</code></li> </ul> </li> </ul> <p>To see swagger for ROR Api, go to http://localhost:10000/swagger/index.html</p>"},{"location":"getting-started/#environment-variables","title":"Environment Variables","text":"<ul> <li>&lt;repo root&gt;/<code>.env</code> has the default settings for docker compose</li> <li>Env variables used during development are set in <code>hacks/docker-compose/</code></li> <li>Env varaibles used in cluster are set with charts in <code>charts/</code></li> </ul>"},{"location":"getting-started/#needed-infrastructure","title":"Needed infrastructure","text":"Service What Url ReadMe link Comment DEX Authentication www: http://localhost:5556,  grpc api: http://localhost:5557 dex doc docker hub Reachable from inside and outside of docker Openldap Mocking users http://localhost:389 MongoDb Document database localhost:27017 Mongo-Express Gui for document base http://localhost:8081 RabbitMq Message bus GUI: http://localhost:15672, , amqp port: localhost:5672 Vault Secrets handling GUI: http://localhost:8200 Redis Cache GUI: http://localhost:6379 Redis-insight Cache insight GUI: http://localhost:8001"},{"location":"getting-started/#nhn-ror-services","title":"NHN-ROR services","text":"Service What Url Port ReadMe link Comment ROR-Api WebApi http://localhost:10000 8080 ReadMe.md ROR-Admin Adminportal GUI http://localhost:11000 8090 ReadMe.md ROR-Agent K8s agent http://localhost:8100 8100 ReadMe.md Not run by docker-compose"},{"location":"getting-started/#documentation","title":"Documentation","text":"<p>We pull documentation from code using some go package. Thus all functions should be annotated with a comment describing its use and any caveats. We keep system documentation in <code>cmd/docs/</code>, some files are copied in from .md files located in other parts of the repo using the <code>cmd/docs/collectdocs.sh</code> script. If you see any documentation that is out of date or wrong, please update it.</p>"},{"location":"mongodb/","title":"mongoDB","text":""},{"location":"ror-admin/","title":"ror-admin","text":""},{"location":"ror-agent/","title":"ror-agent","text":""},{"location":"ror-api/","title":"NHN-ROR-API","text":"<p>Webapi made with Golang and Gin webapi framework</p>"},{"location":"ror-api/#prerequisites","title":"Prerequisites","text":"<ul> <li>Golang 1.20.x https://go.dev</li> </ul>"},{"location":"ror-api/#get-started","title":"Get started","text":"<p>Bash commands is from <code>&lt;repo root&gt;/src/backend/ror-api/</code></p> <p>Download dependencies:</p> <pre><code>go get ./...\n</code></pre> <p>Start webapi</p> <pre><code>go run main.go\n</code></pre> <p>Or Start the <code>Debug ROR-Api</code> debugger config from VS Code</p>"},{"location":"ror-api/#generate-swagger-docs","title":"Generate swagger docs:","text":"<p>Foreach endpoint function, you must add comments for it to show in generated openapi spec</p> <p>ex:</p> <pre><code>// @Summary     Create cluster\n// @Schemes\n// @Description Create a cluster\n// @Tags        cluster\n// @Accept      application/json\n// @Produce     application/json\n// @Success     200 {object} responses.ClusterResponse\n// @Failure     403  {string}  Forbidden\n// @Failure     401  {string}  Unauthorized\n// @Failure     500  {string}  Failure message\n// @Router      /v1/cluster [post]\n// @Security    ApiKey || AccessToken\n// @tokenUrl    https://auth.sky.nhn.no/dex/token\n// @scope.write Grants write access\n// @scope.admin Grants read and write access to administrative information\nfunc Create() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        ...\n    }\n}\n</code></pre> <p>Examples of annotations</p> <p>To generate new swagger you need to install a cmd called <code>swag</code> (https://github.com/swaggo/swag):</p> <pre><code>go install github.com/swaggo/swag/cmd/swag@latest\n</code></pre> <p>(and remember to set <code>&lt;userprofile&gt;\\go\\bin</code> in PATH to terminal)</p> <p>And run this command from <code>ror-api</code> root:</p> <pre><code> swag init -g cmd/api/main.go --parseDependency --output cmd/api/docs\n</code></pre> <p>the folder <code>docs</code> and <code>docs\\swagger.json</code> and <code>docs\\swagger.yaml</code> is updated/created</p>"},{"location":"ror-api/aclv2/","title":"ACLv2","text":""},{"location":"ror-api/aclv2/#scopesubject","title":"Scope/subject","text":"<p>Acl v2 implements an accessmodel in two layers, scope og subject.</p>"},{"location":"ror-api/aclv2/#scope","title":"Scope","text":"<p>Scope represent the exten of the right. eg. if you want to grant access to a cluster the scope is cluster.</p> <p>There is a global scope called ror that aplies to the whole system</p> <p>All scopes are represented by the enum type Acl2Scope .</p>"},{"location":"ror-api/aclv2/#subject","title":"Subject","text":"<p>Subject represent id of the resource the access applies to. Eg. if the scope is cluster the subject is a clusterid.</p> <p>If the scope is ror the subject is a group of subject eg cluster granting access to all clusters. The largest spanning subject is Acl2RorSubjectGlobal</p> <p>Valid subjects under the scope ror is defined in the const Acl2RorSubject</p> <p>Scopes are represented by the type Acl2Subject that represents a string.</p>"},{"location":"ror-api/aclv2/#validation","title":"Validation","text":"<p>Scopes can be validated with the method (s Acl2Scope) IsValid() bool</p> <p>Subjects can be validated against its coresponding scope with the method *(s Acl2Subject) HasValidScope(scope Acl2Scope) bool</p>"},{"location":"ror-api/aclv2/#query","title":"Query","text":"<p>The query to the acl v2 engine should be represented by the type AclV2QueryAccessScopeSubject</p> <p>It must be created with the factory <code>NewAclV2QueryAccessScopeSubject(scope any, subject any) AclV2QueryAccessScopeSubject</code> which implements type casting and validation of the query.</p>"},{"location":"ror-api/aclv2/#access","title":"Access","text":"<p>Access is defined by the type  AclV2ListItemAccess as five boolean values representing Read, Create, Update, Delete, Owner.</p> <p>The returnes accessobject can be queried with the methods representing the level of acces we want to check eg:</p> <pre><code>accessQuery := aclmodels.NewAclV2QueryAccessScopeSubject(aclmodels.Acl2ScopeRor, aclmodels.Acl2RorSubjectGlobal)\naccessObject := aclservice.CheckAccessByContextAclQuery(ctx, accessQuery)\nif !accessObject.Read {\n    c.JSON(http.StatusForbidden, \"403: No access\")\n    return\n}\n</code></pre>"},{"location":"ror-api/api-endpoints/","title":"Api endpoints","text":"Method Endpoint acl POST /clusters/register NA GET /v1/m2m/ NA POST /v1/m2m/token NA POST /v1/m2m/heartbeat v2 POST /v1/m2m/resources v2 GET /v1/m2m/resources/hashes v2 POST /v1/m2m/metrics v2 GET /v1/m2m/configuration/operator v2 GET /v1/m2m/configuration/:name v2 GET /v1/desired_versions v2 GET /v1/desired_versions/:key v2 POST /v1/desired_versions v2 PUT /v1/desired_versions/:key v2 DELETE /v1/desired_versions/:key v2 POST /v1/clusters/filter v2 POST /v1/clusters/filter/workspace/:workspaceName/filter v2 GET /v1/clusters/metadata v2 GET /v1/workspaces v2 GET /v1/workspaces/:workspaceName v2 PUT /v1/workspaces/:id v2 GET /v1/datacenters v2 GET /v1/datacenters/:datacenterName v2 POST /v1/datacenters v2 PUT /v1/datacenters/:datacenterId v2 GET /v1/cluster/:clusterid v2 GET /v1/cluster/:clusterid/exists v2 PATCH /v1/cluster/:clusterid/metadata v2 GET /v1/cluster/:clusterid/resources/policyreports v2 GET /v1/metrics v2 GET /v1/metrics/total v2 GET /v1/metrics/datacenters v2 GET /v1/metrics/datacenter/:datacenterName v2 POST /v1/metrics/workspaces/filter v2 POST /v1/metrics/workspaces/datacenter/:datacenterName/filter v2 GET /v1/metrics/workspace/:workspaceName v2 GET /v1/metrics/clusters v2 GET /v1/metrics/clusters/workspace/:workspaceName v2 GET /v1/metrics/cluster/:clusterId v2 GET /v1/metrics/custom/cluster/:property v2 GET /v1/prices v2 GET /v1/prices/provider/:providerName v2 GET /v1/prices/:priceId v2 POST /v1/prices v2 PUT /v1/prices/:priceId v2 DELETE /v1/prices/:priceId* v2 GET /v1/users/self v2 POST /v1/users/self/apikeys v2 POST /v1/users/self/apikeys/filter v2 DELETE /v1/users/self/apikeys/:id v2 GET /v1/acl* v2 GET /v1/acl/migrate v2 POST /v1/apikeys/filter v2 DELETE /v1/apikeys/:id v2 POST /v1/auditlogs/filter v2 GET /v1/auditlogs/:id v2 GET /v1/auditlogs/metadata v2 GET /v1/projects/:id v2 GET /v1/projects/:id/clusters v2 POST /v1/projects/filter v2 POST /v1/projects v2 PUT /v1/projects/:id v2 DELETE /v1/projects/:id v2 GET /v1/tasks v2 GET /v1/tasks/:id v2 POST /v1/tasks v2 PUT /v1/tasks/:id v2 DELETE /v1/tasks/:id v2 GET /v1/operatorconfigs v2 GET /v1/operatorconfigs/:id v2 POST /v1/operatorconfigs v2 PUT /v1/operatorconfigs/:id v2 DELETE /v1/operatorconfigs/:id v2"},{"location":"ror-api/config-management/","title":"Config management","text":""},{"location":"ror-api/config-management/#mergestrategi","title":"Mergestrategi","text":""},{"location":"ror-cli/","title":"ror-cli","text":""},{"location":"ror-cli/auth-flow/","title":"auth-flow","text":""},{"location":"ror-cli/auth-flow/#api-credentials","title":"api-credentials","text":""},{"location":"ror-cli/auth-flow/#k8s-credentials","title":"k8s-credentials","text":""},{"location":"ror-docs/","title":"ror-docs","text":"<p>ror-docs ern en mkdocs-material side som genereres automatisk ved push til <code>docs/**/*</code> og <code>mkdocs.yaml</code>. mkdocs.yaml inneholder config og mapping av filer under /docs.</p>"},{"location":"ror-docs/#mapping-av-filer","title":"Mapping av filer","text":"<p>under <code>map:</code> i <code>mkdocs.yaml</code>defineres mapping av filer, f\u00f8rste niv\u00e5 er headere, underniv\u00e5 er trestruktur i sidemenyen.</p> <p>eks: <pre><code>nav:\n  - ROR:\n    - index.md\n    - components.md\n    - design.md\n    - getting-started.md\n  - Clients:\n    - ror-admin:\n      - ror-admin/index.md\n    - ror-cli:\n      - ror-cli/index.md\n      - ror-cli/auth-flow.md\n</code></pre></p>"},{"location":"ror-docs/#kodenr-dokumentasjon","title":"Koden\u00e6r dokumentasjon","text":"<p>Hvis dokumentasjonen er lagt sammen med koden kan den automatisk integreres med ror-docs ved \u00e5 legg til en kopieringskommando i filen <code>/cmd/docs/collectdocs.sh</code>. Husk \u00e5 mappe filen i <code>mkdocs.yaml</code></p> <p>eks: <pre><code>#!/bin/bash\n\n#API\ncp cmd/api/ReadMe.md docs/ror-api/index.md\n</code></pre></p>"},{"location":"ror-ms-auth/","title":"ror-ms-auth","text":""},{"location":"ror-ms-nhn/","title":"ror-ms-nhn","text":""},{"location":"ror-ms-slack/","title":"ror-ms-slack","text":""},{"location":"ror-operator/","title":"ror-operator","text":""},{"location":"ror-operator/#installation-flowchart","title":"Installation flowchart","text":""},{"location":"vault/","title":"vault","text":""}]}